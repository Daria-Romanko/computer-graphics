import cv2
import numpy as np
import matplotlib.pyplot as plt

'''
Задание:
Преобразовать изображение из RGB в оттенки серого.
Реализовать два варианта формулы с учетом разных вкладов R, G и B в интенсивность (см презентацию).
Найти разность полученных полутоновых изображений.
Построить гистограммы интенсивности после одного и второго преобразования.
'''


'''
Преобразовываем изображение image из RGB в оттенки серого по разным 2-м формулам (из презентации "Лекция 2", слайды 53-54).
В результате получаем 2 разных изображения в оттенках серого: gray1 и gray2
'''
def grayscale(image):
    
    # узнаем r, g, b
    r = image[:,:,0] # выбираем в изображении все пиксели по высоте и ширине из 0-го канала цветовой модели
    g = image[:,:,1]
    b = image[:,:,2]

    # считаем новые значения для r, g, b по формулам из лекции.
    # преобразуем в формат np.uint8 (так обычно хранятся изображения)
    gray1 = (0.299 * r + 0.587 * g + 0.114 * b).astype(np.uint8) # первое изображение в оттенках серого
    gray2 = (0.2126 * r + 0.7152 * g + 0.0722 * b).astype(np.uint8) # второе изображение в оттенках серого
    
    
    return gray1, gray2

'''
выводим изображение image с заголовком title (чаще всего это формула).
n - номер сектора, где располагается изображение,
cmap - цветовая карта (палитра), которая определяет, как числовые значения преобразовываются в цвета.
По умолчанию чаще всего используется virdis, но есть много других. У меня в коде встречается gray для преобразования в серый.
'''
def picture(image, title, n, cmap = 'viridis'):
    plt.subplot(2, 3, n) # расположение на экране
    plt.imshow(image, cmap=cmap)
    plt.title(title)
    plt.axis('off')
    plt.tight_layout()
    
'''
рисуем гистограмму частот интенсивностей для изображения image.
title - заголовок 
n - номер сектора, где располагается гистограмма
'''
def histogram(image, title, n):
    plt.subplot(2, 3, n) # расположение на экране
    # строим гистограмму из 256 столбиков
    # image.ravel() - преобразует многомерный массив (изображение) в одномерный массив
    plt.hist(image.ravel(), bins=256, range=[0, 256], color='green', alpha=0.7) 
    plt.title(title)
    plt.xlabel('Интенсивность')
    plt.ylabel('Частота')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()


    

# считываем изображение.
# Нам нужно, чтобы изображение было в формате RGB, но imread считывает его в формате BGR.
# поэтому добавляем преобразование из BGR в RGB.
image = cv2.cvtColor(cv2.imread('dogs.jpg'), cv2.COLOR_BGR2RGB)

gray1, gray2 = grayscale(image) # получаем из исходного 2 изображения в оттенках серого

# находим разность серых изображений.
# absdiff для каждого пикселя вычисляет модуль разности между одним изображением и другим
difference = cv2.absdiff(gray1, gray2) 


# дальше - демонстрация всех картинок и гистграмм.
# первый ряд: серое изображение полученное по первой формуле, потом по втрой формуле и разность этих изображений
# второй ряд: гистграмма интенсивности для первого серого изображения, потом для второго и исходное изображение

title1 = 'Формула 0.299 R + 0.587 G + 0.114 B'
title2 = 'Формула 0.2126 R + 0.7152 G + 0.0722 B'

plt.figure(figsize=(15, 10))

picture(gray1, title1, 1, 'gray')
picture(gray2, title2, 2, 'gray')
picture(difference, 'Разность изображений', 3, 'gray')

histogram(gray1, title1, 4)
histogram(gray2, title2, 5)

picture(image, 'Исходное RGB изображение', 6)

plt.show()


